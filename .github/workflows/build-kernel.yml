name: Build Android Kernels

on:
  workflow_dispatch:
    inputs:
      device:
        description: '目标设备'
        required: true
        type: choice
        options:
        - mondrian
        - vermeer
        - sheng
      toolchain:
        description: '工具链选择'
        required: false
        default: 'clang'
        type: choice
        options:
        - clang
        - gcc
      clean_build:
        description: '清洁构建'
        required: false
        default: false
        type: boolean
      enable_docker:
        description: '启用 Docker 容器支持'
        required: false
        default: false
        type: boolean

  push:
    branches: [main, master]
    tags: ['v*']

  pull_request:
    branches: [main, master]

env:
  USE_CCACHE: 1
  CCACHE_EXEC: /usr/bin/ccache
  CCACHE_MAXSIZE: 5G

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: [mondrian, vermeer, sheng]
    # 如果指定了特定设备，只构建该设备
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.device == matrix.device ||
      github.event_name != 'workflow_dispatch'
    
    name: Build Kernel for ${{ matrix.device }}
    timeout-minutes: 120
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabi \
          gcc-11-aarch64-linux-gnu \
          g++-11-aarch64-linux-gnu \
          make \
          bc \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          libncurses-dev \
          device-tree-compiler \
          lz4 \
          lzop \
          zip \
          ccache \
          patchelf \
          rsync \
          file \
          cpio \
          kmod

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: kernel-${{ matrix.device }}-${{ github.sha }}
        restore-keys: |
          kernel-${{ matrix.device }}-

    - name: Create default configs if missing
      run: |
        # 创建设备配置文件（如果不存在）
        mkdir -p arch/arm64/configs
        
        for device in mondrian vermeer sheng; do
          if [ ! -f "arch/arm64/configs/${device}_defconfig" ]; then
            echo "# Default config for $device" > arch/arm64/configs/${device}_defconfig
            echo "CONFIG_ARM64=y" >> arch/arm64/configs/${device}_defconfig
            echo "CONFIG_ARCH_QCOM=y" >> arch/arm64/configs/${device}_defconfig
            echo "CONFIG_SERIAL_MSM_CONSOLE=y" >> arch/arm64/configs/${device}_defconfig
          fi
        done

    - name: Build kernel
      run: |
        set -e
        
        DEVICE="${{ matrix.device }}"
        echo "Building kernel for $DEVICE"
        
        # 设置环境变量
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CCACHE_DIR=${{ github.workspace }}/.ccache
        
        # 创建输出目录
        mkdir -p out/$DEVICE
        
        # 配置内核
        echo "Configuring kernel with ${DEVICE}_defconfig"
        make O=out/$DEVICE ${DEVICE}_defconfig
        
        # 启用 Docker 支持（如果请求）
        if [ "${{ github.event.inputs.enable_docker }}" = "true" ]; then
          echo "Enabling Docker container support..."
          # 应用 Docker 相关配置
          echo "CONFIG_NAMESPACES=y" >> out/$DEVICE/.config
          echo "CONFIG_NET_NS=y" >> out/$DEVICE/.config
          echo "CONFIG_PID_NS=y" >> out/$DEVICE/.config
          echo "CONFIG_USER_NS=y" >> out/$DEVICE/.config
          echo "CONFIG_UTS_NS=y" >> out/$DEVICE/.config
          echo "CONFIG_CGROUPS=y" >> out/$DEVICE/.config
          echo "CONFIG_CGROUP_DEVICE=y" >> out/$DEVICE/.config
          echo "CONFIG_CGROUP_FREEZER=y" >> out/$DEVICE/.config
          echo "CONFIG_CGROUP_PIDS=y" >> out/$DEVICE/.config
          echo "CONFIG_OVERLAY_FS=y" >> out/$DEVICE/.config
          
          # 重新生成配置
          make O=out/$DEVICE olddefconfig
        fi
        
        # 开始构建内核
        echo "Starting kernel build..."
        make -j$(($(nproc) + 1)) O=out/$DEVICE CROSS_COMPILE=aarch64-linux-gnu-
        
        # 验证构建产物
        if [ ! -f "out/$DEVICE/arch/arm64/boot/Image.gz-dtb" ] && [ ! -f "out/$DEVICE/arch/arm64/boot/Image" ]; then
          echo "Error: Kernel image not found!"
          ls -la out/$DEVICE/arch/arm64/boot/
          exit 1
        fi

    - name: Package kernel
      run: |
        DEVICE="${{ matrix.device }}"
        BUILD_DATE=$(date +%Y%m%d)
        COMMIT_HASH=${GITHUB_SHA:0:8}
        
        mkdir -p build_artifacts/$DEVICE
        
        # 复制内核镜像
        if [ -f "out/$DEVICE/arch/arm64/boot/Image.gz-dtb" ]; then
          cp out/$DEVICE/arch/arm64/boot/Image.gz-dtb build_artifacts/$DEVICE/
        elif [ -f "out/$DEVICE/arch/arm64/boot/Image" ]; then
          cp out/$DEVICE/arch/arm64/boot/Image build_artifacts/$DEVICE/
        fi
        
        # 创建设备信息文件
        cat > build_artifacts/$DEVICE/build-info.txt << EOF
Device: $DEVICE
Build date: $(date)
Commit: $COMMIT_HASH
GitHub Run ID: ${GITHUB_RUN_ID}
Docker support: ${{ github.event.inputs.enable_docker || 'false' }}
EOF
        
        # 打包
        cd build_artifacts/$DEVICE
        zip -r9 "$DEVICE-kernel-$BUILD_DATE-$COMMIT_HASH.zip" .

    - name: Upload kernel artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ matrix.device }}
        path: build_artifacts/${{ matrix.device }}/*.zip
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create Release
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*.zip
        generate_release_notes: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
