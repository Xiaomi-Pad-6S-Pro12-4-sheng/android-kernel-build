name: Build Android Kernels - Fixed Version

on:
  workflow_dispatch:
    inputs:
      device:
        description: '目标设备'
        required: true
        type: choice
        options:
        - mondrian
        - vermeer
        - sheng
      toolchain:
        description: '工具链选择'
        required: false
        default: 'clang'
        type: choice
        options:
        - clang
        - gcc
      clean_build:
        description: '清洁构建'
        required: false
        default: false
        type: boolean
      enable_docker:
        description: '启用 Docker 支持'
        required: false
        default: false
        type: boolean

  push:
    branches: [main, master]
    tags: ['v*']

  pull_request:
    branches: [main, master]

env:
  USE_CCACHE: 1
  CCACHE_EXEC: /usr/bin/ccache
  CCACHE_MAXSIZE: 5G

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: [mondrian, vermeer, sheng]
    # 如果指定了特定设备，只构建该设备
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.device == matrix.device ||
      github.event_name != 'workflow_dispatch'
    
    name: 构建 ${{ matrix.device }} 内核
    timeout-minutes: 120
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: 设置构建环境
      run: bash scripts/setup-environment.sh

    - name: 下载工具链
      run: bash scripts/download-toolchains.sh

    - name: 下载高通依赖
      run: bash scripts/download-qcom-deps.sh

    - name: 设置 ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: kernel-${{ matrix.device }}-${{ github.sha }}
        restore-keys: |
          kernel-${{ matrix.device }}-

    - name: 构建内核
      run: |
        set -e
        BUILD_CMD="bash scripts/build-kernel.sh \
          --device ${{ matrix.device }} \
          --toolchain ${{ github.event.inputs.toolchain || 'clang' }} \
          --jobs $(($(nproc) + 1))"
        
        # 添加清洁构建选项
        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          BUILD_CMD="$BUILD_CMD --clean"
        fi
        
        # 添加 Docker 支持选项
        if [ "${{ github.event.inputs.enable_docker }}" = "true" ]; then
          BUILD_CMD="$BUILD_CMD --enable-docker"
        fi
        
        echo "执行构建命令: $BUILD_CMD"
        $BUILD_CMD

    - name: 打包内核
      if: success()
      run: |
        set -e
        DEVICE="${{ matrix.device }}"
        BUILD_DATE=$(date +%Y%m%d)
        COMMIT_HASH=${GITHUB_SHA:0:8}
        
        # 创建设备特定的打包目录
        mkdir -p "build_artifacts/${DEVICE}"
        
        # 查找并复制内核镜像
        if [ -f "out/$DEVICE/arch/arm64/boot/Image.gz-dtb" ]; then
          cp "out/$DEVICE/arch/arm64/boot/Image.gz-dtb" "build_artifacts/${DEVICE}/"
          echo "✅ 找到 Image.gz-dtb"
        elif [ -f "out/$DEVICE/arch/arm64/boot/Image" ]; then
          cp "out/$DEVICE/arch/arm64/boot/Image" "build_artifacts/${DEVICE}/"
          echo "✅ 找到 Image"
        else
          echo "⚠️  未找到标准内核镜像，尝试查找其他格式..."
          find "out/$DEVICE/arch/arm64/boot/" -type f -name "Image*" -exec cp {} "build_artifacts/${DEVICE}/" \;
        fi
        
        # 复制设备树文件
        if [ -d "out/$DEVICE/arch/arm64/boot/dts" ]; then
          mkdir -p "build_artifacts/${DEVICE}/dtb"
          find "out/$DEVICE/arch/arm64/boot/dts" -name "*.dtb" -exec cp {} "build_artifacts/${DEVICE}/dtb/" \; 2>/dev/null || true
        fi
        
        # 复制模块
        if [ -d "out/$DEVICE/lib/modules" ]; then
          mkdir -p "build_artifacts/${DEVICE}/modules"
          find "out/$DEVICE/lib/modules" -name "*.ko" -exec cp {} "build_artifacts/${DEVICE}/modules/" \; 2>/dev/null || true
        fi
        
        # 创建设备信息文件
        cat > "build_artifacts/${DEVICE}/build-info.txt" << EOF
设备代号: $DEVICE
设备名称: $(case $DEVICE in 
  "mondrian") echo "红米 K60" ;; 
  "vermeer") echo "红米 K70" ;; 
  "sheng") echo "小米 Pad 6S Pro" ;; 
  esac)
芯片平台: $(case $DEVICE in 
  "mondrian") echo "骁龙8+ Gen 1 (SM8475)" ;; 
  "vermeer"|"sheng") echo "骁龙8 Gen 2 (SM8550)" ;; 
  esac)
构建时间: $(date)
Git提交: ${COMMIT_HASH}
构建系统: GitHub Actions
Docker支持: ${{ github.event.inputs.enable_docker || 'false' }}
EOF

        # 打包
        cd "build_artifacts/${DEVICE}"
        zip -r9 "${DEVICE}-kernel-${BUILD_DATE}-${COMMIT_HASH}.zip" ./*
        
        echo "✅ 打包完成: ${DEVICE}-kernel-${BUILD_DATE}-${COMMIT_HASH}.zip"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ matrix.device }}
        path: build_artifacts/${{ matrix.device }}/*.zip
        retention-days: 30
        if-no-files-found: error

    - name: 构建失败处理
      if: failure()
      run: |
        echo "❌ 构建失败!"
        echo "调试信息:"
        echo "设备: ${{ matrix.device }}"
        echo "工作目录: $(pwd)"
        echo "目录结构:"
        ls -la
        echo "工具链目录:"
        ls -la toolchains/ || echo "工具链目录不存在"
        echo "输出目录:"
        ls -la out/ || echo "输出目录不存在"

  create-release:
    needs: build
    runs-on:
