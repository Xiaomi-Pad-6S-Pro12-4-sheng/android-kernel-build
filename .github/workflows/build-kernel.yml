name: Build Xiaomi Pad 6S Pro Kernel

on:
  workflow_dispatch:
    inputs:
      device:
        description: '设备代号'
        required: true
        default: 'sheng'
        type: string
      kernel_version:
        description: '内核版本'
        required: true
        default: '5.15'
        type: string
      toolchain:
        description: '工具链选择'
        required: true
        default: 'clang'
        type: choice
        options:
          - clang
          - gcc
      enable_docker:
        description: '启用Docker支持'
        required: true
        default: false
        type: boolean
      clean_build:
        description: '清洁构建'
        required: true
        default: true
        type: boolean
  
  # 也可以通过push触发
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/**'

jobs:
  build:
    name: 构建内核
    runs-on: ubuntu-22.04
    
    steps:
      - name: 检查代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: 设置环境变量
        run: |
          echo "DEVICE=${{ github.event.inputs.device || 'sheng' }}" >> $GITHUB_ENV
          echo "KERNEL_VERSION=${{ github.event.inputs.kernel_version || '5.15' }}" >> $GITHUB_ENV
          echo "TOOLCHAIN=${{ github.event.inputs.toolchain || 'clang' }}" >> $GITHUB_ENV
          echo "ENABLE_DOCKER=${{ github.event.inputs.enable_docker || 'false' }}" >> $GITHUB_ENV
          echo "CLEAN_BUILD=${{ github.event.inputs.clean_build || 'true' }}" >> $GITHUB_ENV
          echo "ROOT_DIR=$(pwd)" >> $GITHUB_ENV
          echo "OUTPUT_DIR=$(pwd)/out/${{ github.event.inputs.device || 'sheng' }}" >> $GITHUB_ENV
      
      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              libncurses5-dev \
              libssl-dev \
              flex \
              bison \
              libelf-dev \
              libdw-dev \
              zlib1g-dev \
              binutils-dev \
              libiberty-dev \
              git \
              ccache \
              curl \
              wget \
              unzip \
              python3 \
              python3-pip \
              rsync \
              bc \
              dwarves
      
      - name: 安装Python依赖
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyelftools
      
      - name: 配置ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-
          max-size: 10G
      
      - name: 设置构建环境
        run: |
          bash scripts/setup-environment.sh
      
      - name: 下载工具链
        run: |
          bash scripts/download-toolchains.sh
      
      - name: 下载高通依赖
        run: |
          bash scripts/download-qcom-deps.sh
      
      - name: 启用Docker支持（如果需要）
        if: env.ENABLE_DOCKER == 'true'
        run: |
          echo "[*] 准备Docker支持配置"
          # 内核构建时会自动应用Docker配置
      
      - name: 构建内核
        run: |
          BUILD_ARGS="-d $DEVICE -k $KERNEL_VERSION -t $TOOLCHAIN"
          if [ "$CLEAN_BUILD" = "true" ]; then
              BUILD_ARGS="$BUILD_ARGS --clean"
          fi
          if [ "$ENABLE_DOCKER" = "true" ]; then
              BUILD_ARGS="$BUILD_ARGS --enable-docker"
          fi
          bash scripts/build-kernel.sh $BUILD_ARGS
      
      - name: 验证构建结果
        run: |
          echo "[*] 验证构建产物..."
          if [ -f "$OUTPUT_DIR/Image.gz-dtb" ]; then
              echo "✅ 内核镜像存在"
              ls -lh "$OUTPUT_DIR/Image.gz-dtb"
          else
              echo "❌ 内核镜像不存在！"
              exit 1
          fi
          
          if [ -d "$OUTPUT_DIR/dtb" ]; then
              echo "✅ 设备树目录存在"
              ls -lh "$OUTPUT_DIR/dtb/" || true
          else
              echo "⚠️  设备树目录可能不存在"
          fi
      
      - name: 打包构建产物
        run: |
          echo "[*] 打包构建产物..."
          mkdir -p build_artifacts
          cp -r "$OUTPUT_DIR"/* build_artifacts/
          cp README.md build_artifacts/
          
          # 生成构建信息
          cat > build_artifacts/online-build-info.txt << EOF
          # 在线构建信息
          构建时间: $(date)
          构建ID: ${{ github.run_id }}
          构建SHA: ${{ github.sha }}
          设备: $DEVICE
          内核版本: $KERNEL_VERSION
          工具链: $TOOLCHAIN
          Docker支持: $ENABLE_DOCKER
          工作流URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF
          
          # 创建压缩包
          tar -czf "xiaomi-pad-6s-pro-kernel-${{ github.run_id }}.tar.gz" build_artifacts/
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: xiaomi-pad-6s-pro-kernel
          path: xiaomi-pad-6s-pro-kernel-${{ github.run_id }}.tar.gz
          retention-days: 60
      
      - name: 创建GitHub Release
        if: success() && github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_id }}
          name: "Xiaomi Pad 6S Pro 内核构建 ${{ github.run_id }}"
          body: |
            ## 构建详情
            - **设备**: Xiaomi Pad 6S Pro (${{ env.DEVICE }})
            - **内核版本**: Linux ${{ env.KERNEL_VERSION }}.x
            - **处理器**: 骁龙 8 Gen 2 (SM8550)
            - **工具链**: ${{ env.TOOLCHAIN }}
            - **Docker支持**: ${{ env.ENABLE_DOCKER }}
            - **构建时间**: $(date)
            
            ## 构建产物
            - 内核镜像: `Image.gz-dtb`
            - 内核配置: `kernel_config`
            - 设备树文件: `dtb/` 目录
            - 内核模块: `modules/` 目录
            - 构建信息: `build-info.txt`
          files: xiaomi-pad-6s-pro-kernel-${{ github.run_id }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}