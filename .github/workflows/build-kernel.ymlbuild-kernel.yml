name: Build Android Kernel with Docker Support

on:
  workflow_dispatch  # 允许手动触发工作流

env:
  KERNEL_SOURCE: "https://github.com/Xiaomi-Pad-6S-Pro12-4-sheng/android-kernel-build" # 内核源码仓库
  KERNEL_BRANCH: "main" # 默认分支
  KERNEL_CONFIG: "sheng_defconfig" # 默认配置文件，适用于Xiaomi Pad 6S Pro
  ARCH: "arm64"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Checkout Kernel Source
      run: |
        git clone --depth=1 --branch=${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_SOURCE }} kernel

    - name: Set up Environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq build-essential flex bison libssl-dev libelf-dev bc python3 \
          git curl wget make libncurses-dev device-tree-compiler lz4 lzop zip tar \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi

    - name: Download Toolchain
      run: |
        # 下载AOSP Clang工具链
        git clone --depth=1 --branch=master https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang
        # 也可以选择下载项目自带的工具链
        if [ -f "scripts/download-toolchains.sh" ]; then
          bash scripts/download-toolchains.sh
        fi

    - name: Configure Kernel for Docker
      run: |
        cd kernel
        # 首先载入默认配置
        make ARCH=${{ env.ARCH }} O=out ${{ env.KERNEL_CONFIG }}
        # 使用项目自带的Docker配置脚本（如果存在）
        if [ -f "../scripts/enable-docker-support.sh" ]; then
          pushd out
          bash "../../scripts/enable-docker-support.sh"
          popd
        else
          # 否则使用内置脚本
          cat > ../enable_docker_config.sh << 'EOF'
          #!/bin/bash
          CONFIG_FILE="out/.config"
          # 启用Docker所需的Namespace和Cgroup支持
          declare -A CONFIG_OPTS=(
            ["CONFIG_NAMESPACES"]="y"
            ["CONFIG_NET_NS"]="y"
            ["CONFIG_PID_NS"]="y"
            ["CONFIG_IPC_NS"]="y"
            ["CONFIG_UTS_NS"]="y"
            ["CONFIG_CGROUPS"]="y"
            ["CONFIG_CGROUP_CPUACCT"]="y"
            ["CONFIG_CGROUP_DEVICE"]="y"
            ["CONFIG_CGROUP_FREEZER"]="y"
            ["CONFIG_CGROUP_SCHED"]="y"
            ["CONFIG_CPUSETS"]="y"
            ["CONFIG_MEMCG"]="y"
            ["CONFIG_KEYS"]="y"
            ["CONFIG_VETH"]="y"
            ["CONFIG_BRIDGE"]="y"
            ["CONFIG_BRIDGE_NETFILTER"]="y"
            ["CONFIG_IP_NF_FILTER"]="y"
            ["CONFIG_IP_NF_TARGET_MASQUERADE"]="y"
            ["CONFIG_NETFILTER_XT_MATCH_ADDRTYPE"]="y"
            ["CONFIG_NETFILTER_XT_MATCH_CONNTRACK"]="y"
            ["CONFIG_NETFILTER_XT_MATCH_IPVS"]="y"
            ["CONFIG_IP_NF_NAT"]="y"
            ["CONFIG_NF_NAT"]="y"
            ["CONFIG_POSIX_MQUEUE"]="y"
            ["CONFIG_DEVPTS_MULTIPLE_INSTANCES"]="y"
            ["CONFIG_OVERLAY_FS"]="y"
            ["CONFIG_USER_NS"]="y"
          )
          for opt in "${!CONFIG_OPTS[@]}"; do
            sed -i "s/^# $opt is not set/$opt=${CONFIG_OPTS[$opt]}/" $CONFIG_FILE || echo "$opt=${CONFIG_OPTS[$opt]}" >> $CONFIG_FILE
          done
          EOF
          chmod +x ../enable_docker_config.sh
          ../enable_docker_config.sh
        fi
        # 应用设备特定的Docker配置
        if [ -f "../scripts/device-docker-config.sh" ]; then
          pushd out
          bash "../../scripts/device-docker-config.sh" "${{ env.KERNEL_CONFIG%%_defconfig }}"
          popd
        fi
        # 生成最终配置
        make ARCH=${{ env.ARCH }} O=out olddefconfig

    - name: Build Kernel
      run: |
        cd kernel
        # 设置编译环境变量
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        
        # 选择合适的工具链
        if [ -f "../clang/bin/clang" ]; then
          export CC="$(pwd)/../clang/bin/clang"
          export CLANG_TRIPLE=aarch64-linux-gnu-
          echo "Using AOSP Clang toolchain"
        elif [ -f "../toolchains/aosp-clang/bin/clang" ]; then
          export CC="$(pwd)/../toolchains/aosp-clang/bin/clang"
          export CLANG_TRIPLE=aarch64-linux-gnu-
          echo "Using project clang toolchain"
        else
          export CC="${CROSS_COMPILE}gcc"
          echo "Using GCC toolchain"
        fi
        
        # 开始构建内核
        make -j$(nproc) ARCH=${{ env.ARCH }} O=out \
          CC="$CC" \
          CROSS_COMPILE="$CROSS_COMPILE" \
          CROSS_COMPILE_ARM32="$CROSS_COMPILE_ARM32" \
          ${CLANG_TRIPLE:+CLANG_TRIPLE="$CLANG_TRIPLE"}
        
        # 构建模块
        make -j$(nproc) ARCH=${{ env.ARCH }} O=out modules

    - name: Verify Docker Support
      run: |
        cd kernel
        # 使用项目自带的验证脚本（如果存在）
        if [ -f "../scripts/verify-docker-support.sh" ]; then
          if [ -f "out/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ]; then
            bash "../scripts/verify-docker-support.sh" "out/arch/${{ env.ARCH }}/boot/Image.gz-dtb"
          elif [ -f "out/arch/${{ env.ARCH }}/boot/Image" ]; then
            bash "../scripts/verify-docker-support.sh" "out/arch/${{ env.ARCH }}/boot/Image"
          fi
        fi

    - name: Package Build Artifacts
      run: |
        cd kernel
        mkdir -p artifacts
        
        # 复制内核镜像
        if [ -f "out/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ]; then
          cp out/arch/${{ env.ARCH }}/boot/Image.gz-dtb artifacts/
          KERNEL_IMAGE="Image.gz-dtb"
        elif [ -f "out/arch/${{ env.ARCH }}/boot/Image" ]; then
          cp out/arch/${{ env.ARCH }}/boot/Image artifacts/
          KERNEL_IMAGE="Image"
        fi
        
        # 复制配置文件
        cp out/.config artifacts/
        
        # 复制设备树文件
        if [ -d "out/arch/${{ env.ARCH }}/boot/dts" ]; then
          mkdir -p artifacts/dtb
          find out/arch/${{ env.ARCH }}/boot/dts -name "*.dtb" -exec cp {} artifacts/dtb/ \;
        fi
        
        # 复制模块
        if [ -d "out/lib/modules" ]; then
          mkdir -p artifacts/modules
          find out/lib/modules -name "*.ko" -exec cp {} artifacts/modules/ \;
        fi
        
        # 创建构建信息
        cat > artifacts/build-info.txt << EOF
        Device: ${{ env.KERNEL_CONFIG%%_defconfig }}
        Kernel Image: $KERNEL_IMAGE
        Build Date: $(date)
        Docker Support: Enabled
        EOF
        
        # 打包
        tar -czf kernel_artifacts.tar.gz -C artifacts .

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-with-docker-${{ env.KERNEL_CONFIG%%_defconfig }}
        path: kernel/kernel_artifacts.tar.gz
        retention-days: 60
